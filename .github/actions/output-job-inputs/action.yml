name: Output Scheduled Actions
description: ""

inputs:
  token:
    description: The GitHub token used to create an authenticated client
    default: ${{ github.token }}
    required: false
  variables_json:
    description: 'JSON string of variables'
    required: true
    default: ''

runs:
  using: "composite"
  steps:
    - name: Generate Deployment Summary
      uses: actions/github-script@v6
      with:
        script: |
          const summary = core.summary;
          
          // Retrieve the input JSON string from the global inputs variable.
          const inputJson = inputs.variables_json;
          let variables;
          try {
            variables = JSON.parse(inputJson);
          } catch (e) {
            console.error('Failed to parse input JSON:', e);
            process.exit(1);
          }
          
          // Prepare the table rows with a header row.
          let tableRows = [];
          tableRows.push([
            { data: 'Variable Name', header: true },
            { data: 'Cluster Name', header: true },
            { data: 'Chart Name', header: true },
            { data: 'Version', header: true }
          ]);
          
          // Iterate over each key starting with '_SCHEDULE_'
          for (const key in variables) {
            if (key.startsWith('_SCHEDULE_')) {
              const value = variables[key];
              // Split the value on the first comma.
              const commaIndex = value.indexOf(',');
              if (commaIndex === -1) {
                console.log(`No comma found for ${key}, skipping`);
                continue;
              }
              // Everything after the comma should be a JSON string.
              const jsonStr = value.substring(commaIndex + 1).trim();
              let data;
              try {
                data = JSON.parse(jsonStr);
              } catch (err) {
                console.log(`Failed to parse JSON for ${key}: ${err}`);
                continue;
              }
              // Extract properties.
              const clusterName = data.cluster_name || '';
              const chartName = data.chart_name || '';
              const version = data.version || '';
          
              // Append a row for this variable.
              tableRows.push([
                { data: key },
                { data: clusterName },
                { data: chartName },
                { data: version }
              ]);
            }
          }
          
          // Build the summary with a heading and the table.
          await summary
            .addHeading('Deployment Summary', 2)
            .addTable(tableRows)
            .write();
        # Wrap the expression in quotes so it's treated as a string literal.
        variables_json: "${{ toJson(inputs.variables_json) }}"
