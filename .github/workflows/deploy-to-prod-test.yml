name: Deploy to Prod Cluster - Scheduled

on:
  # schedule:
    # This MUST be in sync with the DEPLOYMENT_TIME below (and is in UTC)
    # Set to 5 mins past the hour to avoid the hourly crush
    # - cron: '*/5 * * * *'
  workflow_dispatch:
    inputs:
      cluster:
        type: choice
        description: 'Cluster to deploy to'
        required: true
        options:
          - scdev04-us-west-2
      chart_name:
        type: choice
        description: 'the name of the helm chart to deploy'
        required: true
        options:
# service options
          - sc-ops-canary-github-cloud
# service options end
      chart_version:
        description: |
          The helm chart version number to deploy in git describe X.Y.Z-0-gabcdefa format.
          Value can be found in the annotation of your Github Actions Workflow run.
        required: true
      values_filename:
        description: 'Custom values chart'
        default: 'values.yaml'
      description:
        type: string
        description: |
          A short description of the change being deployed. This will be shared with our
          partners.
        required: true
      freeze_time:
        type: string
        description: |
          Time when deploys will be sent to the next week.
        required: true
      deployment_time:
        type: string
        description: |
          Time when deploys will be scheduled at.
        required: true

jobs:
  deploy:
    name: Schedule deployment
    runs-on: ubuntu-latest
    env:
      FREEZE_TIME: ${{ inputs.freeze_time }}
      DEPLOYMENT_TIME: ${{ inputs.deployment_time }}
    steps:
      - name: calculate date
        id: date
        # date will output the next occurrence of the time, so the logic
        # is if the freeze time is greater than the deployment time, we're
        # in the Freeze period, so we need to target the deployment time in
        # 1 week.
        run: |
          freeze_secs="$(date +%s --date "$FREEZE_TIME")"
          deploy_secs="$(date +%s --date "$DEPLOYMENT_TIME")"
          num_schedules=$(echo '${{ toJson(vars) }}' | jq 'keys | map(select(startswith("_SCHEDULE_"))) | length')
          if [[ "$freeze_secs" -gt "$deploy_secs" ]]; then
            date="$(date --date "$DEPLOYMENT_TIME + $num_schedules seconds + 1 week")"
          else
            date="$(date --date "$DEPLOYMENT_TIME + $num_schedules seconds")"
          fi
          echo "Calculated deployment date: $date"
          echo "date=$date" >> "$GITHUB_OUTPUT"

      - name: skip name test
        if: ${{ github.actor != 'matthew-lewis20' }}
        run: |
          echo "ran by Matt"
      
      - name: output date
        run: |
          echo "${{ steps.date.outputs.date }}"

      # - name: Get deployment action scheduler token from github app
      #   id: github-app
      #   uses: actions/create-github-app-token@v1
      #   with:
      #     app-id: ${{ vars.SCHEDULE_APP_ID }}
      #     private-key: ${{ secrets.SCHEDULE_APP_KEY }}
      #     owner: ${{ github.repository_owner }}

      # - uses: austenstone/schedule@v1.3
      #   with:
      #     github-token: ${{ steps.github-app.outputs.token }}
      #     date: ${{ steps.date.outputs.date }}
      #     workflow: output-inputs.yml
      #     timezone: UTC
      #     inputs: |
      #       {
      #         "cluster": "${{ inputs.cluster }}",
      #         "chart_name": "${{ inputs.chart_name }}",
      #         "chart_version": "${{ inputs.chart_version }}",
      #         "values_filename": "${{ inputs.values_filename }}",
      #         "description": "${{ inputs.description }}",
      #         "slack_channel": "dscc-gha-prod-deploys",
      #         "int_checks_status": "true"
      #       }
