name: Output Scheduled Actions
description: ""

inputs:
  token:
    description: The GitHub token used to create an authenticated client
    default: ${{ github.token }}
    required: false
  variables_json:
    description: 'JSON string of variables'
    required: true
    default: ''

runs:
  using: "composite"
  steps:
    - name: Generate Deployment Summary
      uses: actions/github-script@v6
      env:
        VARIABLES_JSON: "${{ toJson(inputs.variables_json) }}"
      with:
        script: |
          const summary = core.summary;
          
          // Retrieve the input JSON string from the environment.
          const inputJson = process.env.VARIABLES_JSON;
          let variables;
          try {
            variables = JSON.parse(inputJson);
          } catch (e) {
            console.error('Failed to parse input JSON:', e);
            process.exit(1);
          }

          console.log('VARIABLES', variables);
          
          // Prepare the table rows with a header row.
          let tableRows = [];
          tableRows.push([
            { data: 'Variable Name', header: true },
            { data: 'Cluster Name', header: true },
            { data: 'Chart Name', header: true },
            { data: 'Version', header: true }
          ]);
          
          // Process each key starting with '_SCHEDULE_'
          for (const key in variables) {
            console.log('key: ', key);
            if (key.startsWith('_SCHEDULE_')) {
              const value = variables[key];
              const commaIndex = value.indexOf(',');
              if (commaIndex === -1) {
                console.log(`No comma found for ${key}, skipping`);
                continue;
              }
              // Get everything after the comma.
              let jsonStr = value.substring(commaIndex + 1).trim();
              
              // Attempt to parse the JSON.
              let data;
              try {
                data = JSON.parse(jsonStr);
                // If the result is a string, then the JSON was double-encoded.
                if (typeof data === 'string') {
                  data = JSON.parse(data);
                }
              } catch (err) {
                console.log(`Failed to parse JSON for ${key}: ${err}`);
                continue;
              }
              
              // Extract properties in a flexible way.
              const clusterName = data.cluster_name || data.cluster || '';
              const chartName = data.chart_name || '';
              const version = data.version || data.chart_version || '';

              console.log('key: ', key);
              console.log('clusterName: ', clusterName);
              console.log('chartName: ', chartName);
              console.log('version: ', version);
              console.log('===================');
              
              // Append a row for this variable.
              tableRows.push([
                { data: key },
                { data: clusterName },
                { data: chartName },
                { data: version }
              ]);
            }
          }
          
          // Build and write the summary.
          await summary
            .addHeading('Deployment Summary', 2)
            .addTable(tableRows)
            .write();
