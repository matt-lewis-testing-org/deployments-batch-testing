name: Output Scheduled Actions
description: ""

inputs:
  token:
    description: The GitHub token used to create an authenticated client
    default: ${{ github.token }}
    required: false
  variables_json:
    description: 'JSON string of variables'
    required: true
    default: ''

runs:
  using: "composite"
  steps:
  - name: Generate Deployment Summary
    uses: actions/github-script@v6
    with:
      script: |
        // The summary API is available via the core module.
        const core = require('@actions/core');
        const summary = core.summary;
        
        // Directly access the input from the global "inputs" variable.
        const inputJson = inputs.variables_json;
        let variables;
        try {
          variables = JSON.parse(inputJson);
        } catch (e) {
          console.error('Failed to parse input JSON:', e);
          process.exit(1);
        }
        
        // Prepare the table rows with a header row.
        let tableRows = [];
        tableRows.push([
          { data: 'Variable Name', header: true },
          { data: 'Cluster Name', header: true },
          { data: 'Chart Name', header: true },
          { data: 'Version', header: true }
        ]);
        
        // Iterate over each key starting with '_SCHEDULE_'
        for (const key in variables) {
          if (key.startsWith('_SCHEDULE_')) {
            const value = variables[key];
            // Split the value on the first comma.
            const commaIndex = value.indexOf(',');
            if (commaIndex === -1) {
              console.log(`No comma found for ${key}, skipping`);
              continue;
            }
            // Extract the JSON part.
            const jsonStr = value.substring(commaIndex + 1).trim();
            let data;
            try {
              data = JSON.parse(jsonStr);
            } catch (err) {
              console.log(`Failed to parse JSON for ${key}: ${err}`);
              continue;
            }
            // Extract properties.
            const clusterName = data.cluster_name || '';
            const chartName = data.chart_name || '';
            const version = data.version || '';
        
            // Append the row.
            tableRows.push([
              { data: key },
              { data: clusterName },
              { data: chartName },
              { data: version }
            ]);
          }
        }
        
        // Use the summary API to add a heading and table.
        await summary
          .addHeading('Deployment Summary', 2)
          .addTable(tableRows)
          .write();
      with:
        # Ensure the input is stringified if needed.
        variables_json: ${{ toJson(inputs.variables_json) }}
